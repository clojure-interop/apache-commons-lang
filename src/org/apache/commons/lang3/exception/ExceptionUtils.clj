(ns org.apache.commons.lang3.exception.ExceptionUtils
  "Provides utilities for manipulating and examining
  Throwable objects."
  (:refer-clojure :only [require comment defn ->])
  (:import [org.apache.commons.lang3.exception ExceptionUtils]))

(defn ->exception-utils
  "Constructor.

  Public constructor allows an instance of ExceptionUtils to be created, although that is not
   normally necessary."
  (^ExceptionUtils []
    (new ExceptionUtils )))

(defn *get-stack-trace
  "Gets the stack trace from a Throwable as a String.

   The result of this method vary by JDK version as this method
   uses Throwable.printStackTrace(java.io.PrintWriter).
   On JDK1.3 and earlier, the cause exception will not be shown
   unless the specified throwable alters printStackTrace.

  throwable - the Throwable to be examined - `java.lang.Throwable`

  returns: the stack trace as generated by the exception's
    printStackTrace(PrintWriter) method - `java.lang.String`"
  (^java.lang.String [^java.lang.Throwable throwable]
    (ExceptionUtils/getStackTrace throwable)))

(defn *wrap-and-throw
  "Throw a checked exception without adding the exception to the throws
   clause of the calling method. For checked exceptions, this method throws
   an UndeclaredThrowableException wrapping the checked exception. For
   Errors and RuntimeExceptions, the original exception is rethrown.

   The downside to using this approach is that invoking code which needs to
   handle specific checked exceptions must sniff up the exception chain to
   determine if the caught exception was caused by the checked exception.

  throwable - The throwable to rethrow. - `java.lang.Throwable`

  returns: Never actually returned, this generic type matches any type
           which the calling site requires. \"Returning\" the results of this
           method will satisfy the java compiler requirement that all code
           paths return a value. - `<R> R`"
  ([^java.lang.Throwable throwable]
    (ExceptionUtils/wrapAndThrow throwable)))

(defn *index-of-throwable
  "Returns the (zero based) index of the first Throwable
   that matches the specified type in the exception chain from
   a specified index.
   Subclasses of the specified class do not match - see
   indexOfType(Throwable, Class, int) for the opposite.

   A null throwable returns -1.
   A null type returns -1.
   No match in the chain returns -1.
   A negative start index is treated as zero.
   A start index greater than the number of throwables returns -1.

  throwable - the throwable to inspect, may be null - `java.lang.Throwable`
  clazz - the class to search for, subclasses do not match, null returns -1 - `java.lang.Class`
  from-index - the (zero based) index of the starting position, negative treated as zero, larger than chain size returns -1 - `int`

  returns: the index into the throwable chain, -1 if no match or null input - `int`"
  (^Integer [^java.lang.Throwable throwable ^java.lang.Class clazz ^Integer from-index]
    (ExceptionUtils/indexOfThrowable throwable clazz from-index))
  (^Integer [^java.lang.Throwable throwable ^java.lang.Class clazz]
    (ExceptionUtils/indexOfThrowable throwable clazz)))

(defn *get-stack-frames
  "Captures the stack trace associated with the specified
   Throwable object, decomposing it into a list of
   stack frames.

   The result of this method vary by JDK version as this method
   uses Throwable.printStackTrace(java.io.PrintWriter).
   On JDK1.3 and earlier, the cause exception will not be shown
   unless the specified throwable alters printStackTrace.

  throwable - the Throwable to examine, may be null - `java.lang.Throwable`

  returns: an array of strings describing each stack frame, never null - `java.lang.String[]`"
  ([^java.lang.Throwable throwable]
    (ExceptionUtils/getStackFrames throwable)))

(defn *has-cause?
  "Does the throwable's causal chain have an immediate or wrapped exception
   of the given type?

  chain - The root of a Throwable causal chain. - `java.lang.Throwable`
  type - The exception type to test. - `java.lang.Class`

  returns: true, if chain is an instance of type or is an
           UndeclaredThrowableException wrapping a cause. - `boolean`"
  (^Boolean [^java.lang.Throwable chain ^java.lang.Class type]
    (ExceptionUtils/hasCause chain type)))

(defn *get-throwables
  "Returns the list of Throwable objects in the
   exception chain.

   A throwable without cause will return an array containing
   one element - the input throwable.
   A throwable with one cause will return an array containing
   two elements. - the input throwable and the cause throwable.
   A null throwable will return an array of size zero.

   From version 2.2, this method handles recursive cause structures
   that might otherwise cause infinite loops. The cause chain is
   processed until the end is reached, or until the next item in the
   chain is already in the result set.

  throwable - the throwable to inspect, may be null - `java.lang.Throwable`

  returns: the array of throwables, never null - `java.lang.Throwable[]`"
  ([^java.lang.Throwable throwable]
    (ExceptionUtils/getThrowables throwable)))

(defn *remove-common-frames
  "Removes common frames from the cause trace given the two stack traces.

  cause-frames - stack trace of a cause throwable - `java.util.List`
  wrapper-frames - stack trace of a wrapper throwable - `java.util.List`

  throws: java.lang.IllegalArgumentException - if either argument is null"
  ([^java.util.List cause-frames ^java.util.List wrapper-frames]
    (ExceptionUtils/removeCommonFrames cause-frames wrapper-frames)))

(defn *rethrow
  "Throw a checked exception without adding the exception to the throws
   clause of the calling method. This method prevents throws clause
   pollution and reduces the clutter of \"Caused by\" exceptions in the
   stacktrace.

   The use of this technique may be controversial, but exceedingly useful to
   library developers.

    public int propagateExample { // note that there is no throws clause
        try {
            return invocation(); // throws IOException
        } catch (Exception e) {
            return ExceptionUtils.rethrow(e);  // propagates a checked exception
        }
    }


   This is an alternative to the more conservative approach of wrapping the
   checked exception in a RuntimeException:

    public int wrapExample { // note that there is no throws clause
        try {
            return invocation(); // throws IOException
        } catch (Error e) {
            throw e;
        } catch (RuntimeException e) {
            throw e;  // wraps a checked exception
        } catch (Exception e) {
            throw new UndeclaredThrowableException(e);  // wraps a checked exception
        }
    }


   One downside to using this approach is that the java compiler will not
   allow invoking code to specify a checked exception in a catch clause
   unless there is some code path within the try block that has invoked a
   method declared with that checked exception. If the invoking site wishes
   to catch the shaded checked exception, it must either invoke the shaded
   code through a method re-declaring the desired checked exception, or
   catch Exception and use the instanceof operator. Either of these
   techniques are required when interacting with non-java jvm code such as
   Jython, Scala, or Groovy, since these languages do not consider any
   exceptions as checked.

  throwable - The throwable to rethrow. - `java.lang.Throwable`

  returns: Never actually returned, this generic type matches any type
           which the calling site requires. \"Returning\" the results of this
           method, as done in the propagateExample above, will satisfy the
           java compiler requirement that all code paths return a value. - `<R> R`"
  ([^java.lang.Throwable throwable]
    (ExceptionUtils/rethrow throwable)))

(defn *index-of-type
  "Returns the (zero based) index of the first Throwable
   that matches the specified type in the exception chain from
   a specified index.
   Subclasses of the specified class do match - see
   indexOfThrowable(Throwable, Class) for the opposite.

   A null throwable returns -1.
   A null type returns -1.
   No match in the chain returns -1.
   A negative start index is treated as zero.
   A start index greater than the number of throwables returns -1.

  throwable - the throwable to inspect, may be null - `java.lang.Throwable`
  type - the type to search for, subclasses match, null returns -1 - `java.lang.Class`
  from-index - the (zero based) index of the starting position, negative treated as zero, larger than chain size returns -1 - `int`

  returns: the index into the throwable chain, -1 if no match or null input - `int`"
  (^Integer [^java.lang.Throwable throwable ^java.lang.Class type ^Integer from-index]
    (ExceptionUtils/indexOfType throwable type from-index))
  (^Integer [^java.lang.Throwable throwable ^java.lang.Class type]
    (ExceptionUtils/indexOfType throwable type)))

(defn *get-root-cause-stack-trace
  "Creates a compact stack trace for the root cause of the supplied
   Throwable.

   The output of this method is consistent across JDK versions.
   It consists of the root exception followed by each of its wrapping
   exceptions separated by '[wrapped]'. Note that this is the opposite
   order to the JDK1.4 display.

  throwable - the throwable to examine, may be null - `java.lang.Throwable`

  returns: an array of stack trace frames, never null - `java.lang.String[]`"
  ([^java.lang.Throwable throwable]
    (ExceptionUtils/getRootCauseStackTrace throwable)))

(defn *get-default-cause-method-names
  "Deprecated. This feature will be removed in Lang 4.0

  returns: cloned array of the default method names - `java.lang.String[]`"
  ([]
    (ExceptionUtils/getDefaultCauseMethodNames )))

(defn *get-throwable-list
  "Returns the list of Throwable objects in the
   exception chain.

   A throwable without cause will return a list containing
   one element - the input throwable.
   A throwable with one cause will return a list containing
   two elements. - the input throwable and the cause throwable.
   A null throwable will return a list of size zero.

   This method handles recursive cause structures that might
   otherwise cause infinite loops. The cause chain is processed until
   the end is reached, or until the next item in the chain is already
   in the result set.

  throwable - the throwable to inspect, may be null - `java.lang.Throwable`

  returns: the list of throwables, never null - `java.util.List<java.lang.Throwable>`"
  (^java.util.List [^java.lang.Throwable throwable]
    (ExceptionUtils/getThrowableList throwable)))

(defn *get-root-cause-message
  "Gets a short message summarising the root cause exception.

   The message returned is of the form
   {ClassNameWithoutPackage}: {ThrowableMessage}

  th - the throwable to get a message for, null returns empty string - `java.lang.Throwable`

  returns: the message, non-null - `java.lang.String`"
  (^java.lang.String [^java.lang.Throwable th]
    (ExceptionUtils/getRootCauseMessage th)))

(defn *get-message
  "Gets a short message summarising the exception.

   The message returned is of the form
   {ClassNameWithoutPackage}: {ThrowableMessage}

  th - the throwable to get a message for, null returns empty string - `java.lang.Throwable`

  returns: the message, non-null - `java.lang.String`"
  (^java.lang.String [^java.lang.Throwable th]
    (ExceptionUtils/getMessage th)))

(defn *get-throwable-count
  "Counts the number of Throwable objects in the
   exception chain.

   A throwable without cause will return 1.
   A throwable with one cause will return 2 and so on.
   A null throwable will return 0.

   From version 2.2, this method handles recursive cause structures
   that might otherwise cause infinite loops. The cause chain is
   processed until the end is reached, or until the next item in the
   chain is already in the result set.

  throwable - the throwable to inspect, may be null - `java.lang.Throwable`

  returns: the count of throwables, zero if null input - `int`"
  (^Integer [^java.lang.Throwable throwable]
    (ExceptionUtils/getThrowableCount throwable)))

(defn *print-root-cause-stack-trace
  "Prints a compact stack trace for the root cause of a throwable.

   The compact stack trace starts with the root cause and prints
   stack frames up to the place where it was caught and wrapped.
   Then it prints the wrapped exception and continues with stack frames
   until the wrapper exception is caught and wrapped again, etc.

   The output of this method is consistent across JDK versions.
   Note that this is the opposite order to the JDK1.4 display.

   The method is equivalent to printStackTrace for throwables
   that don't have nested causes.

  throwable - the throwable to output, may be null - `java.lang.Throwable`
  stream - the stream to output to, may not be null - `java.io.PrintStream`

  throws: java.lang.IllegalArgumentException - if the stream is null"
  ([^java.lang.Throwable throwable ^java.io.PrintStream stream]
    (ExceptionUtils/printRootCauseStackTrace throwable stream))
  ([^java.lang.Throwable throwable]
    (ExceptionUtils/printRootCauseStackTrace throwable)))

(defn *get-root-cause
  "Introspects the Throwable to obtain the root cause.

   This method walks through the exception chain to the last element,
   \"root\" of the tree, using Throwable.getCause(), and
   returns that exception.

   From version 2.2, this method handles recursive cause structures
   that might otherwise cause infinite loops. If the throwable parameter
   has a cause of itself, then null will be returned. If the throwable
   parameter cause chain loops, the last element in the chain before the
   loop is returned.

  throwable - the throwable to get the root cause for, may be null - `java.lang.Throwable`

  returns: the root cause of the Throwable,
    null if null throwable input - `java.lang.Throwable`"
  (^java.lang.Throwable [^java.lang.Throwable throwable]
    (ExceptionUtils/getRootCause throwable)))

(defn *get-cause
  "Deprecated. This feature will be removed in Lang 4.0, use Throwable.getCause() instead

  throwable - the throwable to introspect for a cause, may be null - `java.lang.Throwable`
  method-names - the method names, null treated as default set - `java.lang.String[]`

  returns: the cause of the Throwable,
    null if none found or null throwable input - `java.lang.Throwable`"
  (^java.lang.Throwable [^java.lang.Throwable throwable method-names]
    (ExceptionUtils/getCause throwable method-names))
  (^java.lang.Throwable [^java.lang.Throwable throwable]
    (ExceptionUtils/getCause throwable)))

